
big_integer& big_integer::operator/=(big_integer rhs) {
//    std::cout << to_string(*this) << "/" << to_string(rhs) << std::endl;
//    std::cout << this->size << "/" << rhs.size << std::endl;
    big_integer res;
    big_integer &left = *this;
    bool resultSign = (rhs.isNegative() == isNegative());
    if (rhs.isNegative())
        rhs.invert();
    if (isNegative())
        left.invert();

    if (*this < rhs) {
        *this = big_integer();
        return (*this);
    } else if (*this == rhs) {
        *this = big_integer(1);
        if (!resultSign)
            this->invert();
        return (*this);
    }

    std::cout << to_string(left) << " " << to_string(rhs) << std::endl;
    big_integer radix(1);
    uint64_t m = left.size - rhs.size;
    uint64_t shift = m;
    res.resize(m + 1);
    radix <<= m * 64;

    // TODO: normalize
    size_t i;
    for (i = rhs.size; i--; ) {
        if (rhs.digits[i] != 0) {
            break;
        }
    }
    if (i == -1) {
        // TODO: strong
        throw std::runtime_error("Division by zero");
    }
    uint64_t k = rhs.digits[i];
    uint64_t sh = 0;
//    std::cout << "befo " << to_string(rhs) << std::endl;
    while (static_cast<int64_t>(k) >= 0) {
        sh++;
        k <<= 1;
    }
    shift = (i) * 64 + sh;
//    std::cout << "shift " << shift << std::endl;
    rhs <<= shift;
    left <<= shift;
//    rhs.setSign(true);
//    left.setSign(true);

//    std::cout << "norm " << to_string(rhs) << std::endl;

//
//    if (left > radix * rhs) {
//        res.digits[res.size - 1] = 1;
//        left -= (rhs <<= shift);
//    } else {
//        res.digits[res.size - 1] = 0;
//    }
//    std::cout << m << std::endl;
    // A left
    // B right
    big_integer partLeft, partRight;

    for (int j = left.size; j >= 0; j--) {
        partLeft.resize(3);
        partRight.resize(2);
//        left.print("left beg for");
//        rhs.print("right beg for");
        for (int i = 0; i < 3; i++) {
            partLeft.digits[i] = 0;
        }
        for (int i = 0; i < 2; i++) {
            partRight.digits[i] = 0;
        }

        // 2 1 0
        for (int i = std::min(3UL, left.size) - 1; i >= 0; --i) {
            partLeft.digits[i] = left.digits[left.size - std::min(3UL, left.size) + i];
        }
        for (int i = std::min(2UL, rhs.size) - 1; i >= 0; --i) {
            partRight.digits[i] = rhs.digits[rhs.size - std::min(3UL, rhs.size) + i];
        }
//        for (int i = 0; i < 3 && static_cast<int>(left.size) - i - 1 >= 0; ++i) {
//            partLeft.digits[3 - i - 1] = left.digits[left.size - i - 1];
//        }
//        for (int i = 0; i < 2 && static_cast<int>(rhs.size) - i - 1 >= 0; ++i) {
//            partRight.digits[2 - i - 1] = rhs.digits[rhs.size - i - 1];
//        }
        partLeft.setSign(true);
        partRight.setSign(true);
//        partLeft.print("pLeft");
//        partRight.print("pRight");
        uint64_t l, r, mid;
        l = 0;
        r = UINT64_MAX;
//        std::cout << to_string(partLeft) << " " << to_string(partRight) << std::endl;
        while (r != l) {
            mid = r - (r - l) / 2;
            big_integer n = partRight * mid;

//            std::cout << mid << " " << l << " " << r << " " << to_string(n) << " ? " << to_string(partLeft) << std::endl;
            if (n < partLeft) {
                l = mid;
            } else if (n > partLeft) {
                r = mid - 1;
            } else {
                l = r = mid;
            }
        }
        if (rhs * l > left) {
            l--;
        }
//        std::cout << to_string(left) << ":" << l << std::endl;

        left -= rhs * l;
        res <<= 64;
        res = res + l;
        if(left.size == 0)
            break;
    }
//    for (int i = m; i >= 0; i--) {
//        shift -= 64;
//        uint64_t rem;
//        div128(res.digits[i], rem, left.digits[rhs.size + i], left.digits[rhs.size + i - 1], rhs.digits[rhs.size - 1]);
//
//        left -= (res.digits[i] << shift) * rhs;
//        while (left.isNegative()) {
//            res.digits[i]--;
//            left += rhs << shift;
//        }
//        std::cout << "ch " << to_string(res) << std::endl;
//    }

    if (!resultSign) {
        res.invert();
    }
    swap(*this, res);
    return (*this);
}
